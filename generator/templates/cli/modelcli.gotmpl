// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
	{{ imports .DefaultImports }}
    {{ imports .Imports }}
	"github.com/spf13/cobra"
)

// register flags to command
func register{{pascalize .Name}}Flags(cmdPrefix string, cmd *cobra.Command) error {
	{{ range .AllOf }}
    // allOf {{.Name}} is not supported by go-swwagger cli yet
    {{ end }}
    {{ range .Properties }}
        {{- $flagStrVar := printf "%vCmdStr" (camelize .Name) }}
        {{- $fullDescription := .Description }}
		{{- if .Required}}
			{{- $fullDescription = printf "Required. %v" $fullDescription}}
		{{- end}}
        {{- if .ReadOnly}}
			{{- $fullDescription = printf "ReadOnly. %v" $fullDescription}}
		{{- end}}
    {{ $flagStrVar }} := fmt.Sprintf("%v.{{ .Name }}", cmdPrefix)
        {{- if .IsPrimitive }}
            {{- if or (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "string") (eq .GoType "float32") (eq .GoType "bool") }}
            {{ $defaultVar := printf "%vDefault" (camelize $flagStrVar) }}
    var {{ $defaultVar}} {{ .GoType }} {{ if .Default }}= {{ printf "%#v" .Default }}{{ end }} 
    _ = cmd.PersistentFlags().{{ pascalize .GoType }}({{ $flagStrVar }}, {{ $defaultVar }}, "{{ $fullDescription }}")
            {{- else }}
    // warning: primitive {{.Name}} {{.GoType }} is not supported by go-swagger cli yet
            {{- end }}
        {{- else if .IsArray }}
    // warning: {{.Name}} {{ .GoType }} array type is not supported by go-swagger cli yet 
        {{- else if .IsMap }}
    // warning: {{.Name}} {{ .GoType }} map type is not supported by go-swagger cli yet
        {{- else }} {{/* struct case */}}
    register{{ pascalize .Name }}Flags({{ $flagStrVar }}, cmd)
        {{- end }}
		{{/* mark required param for the flag */}}
		{{- if .Required }}
	if err := cmd.MarkPersistentFlagRequired({{ $flagStrVar }}); err != nil{
		return err
	}
		{{ end }}
    {{ end }} {{/*Properties*/}}
    return nil
}


// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieve{{pascalize .Name}}Flags({{.ReceiverName}} *{{.Package}}.{{.GoType}}, cmdPrefix string, cmd *cobra.Command) (error, bool) {
    retAdded := false
	{{ range .AllOf }}
     // allOf {{.Name}} is not supported by go-swwagger cli yet
    {{ end }}
    {{ range .Properties }}
        {{- $flagStrVar := printf "%vCmdStr" (camelize .Name) }}
        {{- $flagValueVar := printf "%vValue" (camelize .Name) }}
        {{- $flagStrVar }} := fmt.Sprintf("%v.{{ .Name }}", cmdPrefix)
    if cmd.Flags().Changed({{ $flagStrVar }}) {
        {{- if .IsPrimitive }}
            {{- if or (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "string") (eq .GoType "float32") (eq .GoType "bool") }}
        {{ $flagValueVar }}, err := cmd.Flags().Get{{pascalize .GoType}}({{ $flagStrVar }})
            {{- else }}
        // warning: primitive {{.Name}} {{.GoType }} is not supported by go-swagger cli yet
            {{- end }}
        {{- else if .IsArray }}
        // warning: {{ .Name }} array type {{ .GoType }} is not supported by go-swagger cli yet
        {{- else if .IsMap }}
        // warning: {{ .Name }} map type {{ .GoType }} is not supported by go-swagger cli yet
        {{- else if .IsComplexObject }} {{/*struct case. TODO: move this out of Changed() block, since we want to recurse regardless of flag set*/}}
        {{ $flagValueVar }} := {{.Package}}.{{.GoType}}{}
        err, added := exec{{.Name}}Cmd({{ $flagValueVar }}, {{ $flagStrVar }}, cmd)
        retAdded = retAdded || added
        {{- end }}
        if err != nil{
            return err, false
        }
		{{- if .IsNullable }}
		{{.ReceiverName}}.{{ pascalize .Name }} = &{{ $flagValueVar }}
		{{- else }}
		{{.ReceiverName}}.{{ pascalize .Name }} = {{ $flagValueVar }}
		{{- end }}
            retAdded = true
		}
    {{ end }}
    return nil, retAdded
}