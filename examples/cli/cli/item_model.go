// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/examples/cli/models"
	"github.com/spf13/cobra"
)

// register flags to command
func registerItemFlags(cmdPrefix string, cmd *cobra.Command) error {

	completedCmdStr := fmt.Sprintf("%v.completed", cmdPrefix)

	var completedCmdStrDefault bool
	_ = cmd.PersistentFlags().Bool(completedCmdStr, completedCmdStrDefault, "")

	descriptionCmdStr := fmt.Sprintf("%v.description", cmdPrefix)

	var descriptionCmdStrDefault string
	_ = cmd.PersistentFlags().String(descriptionCmdStr, descriptionCmdStrDefault, "Required. ")

	if err := cmd.MarkPersistentFlagRequired(descriptionCmdStr); err != nil {
		return err
	}

	idCmdStr := fmt.Sprintf("%v.id", cmdPrefix)

	var idCmdStrDefault int64
	_ = cmd.PersistentFlags().Int64(idCmdStr, idCmdStrDefault, "ReadOnly. ")

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveItemFlags(m *models.Item, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	completedCmdStr := fmt.Sprintf("%v.completed", cmdPrefix)
	if cmd.Flags().Changed(completedCmdStr) {
		completedValue, err := cmd.Flags().GetBool(completedCmdStr)
		if err != nil {
			return err, false
		}
		m.Completed = completedValue
		retAdded = true
	}
	descriptionCmdStr := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionCmdStr) {
		descriptionValue, err := cmd.Flags().GetString(descriptionCmdStr)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionValue
		retAdded = true
	}
	idCmdStr := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idCmdStr) {
		idValue, err := cmd.Flags().GetInt64(idCmdStr)
		if err != nil {
			return err, false
		}
		m.ID = idValue
		retAdded = true
	}

	return nil, retAdded
}
